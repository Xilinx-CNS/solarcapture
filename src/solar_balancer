#!/usr/bin/env python3
'''
SPDX-License-Identifier: MIT
X-SPDX-Copyright-Text: Copyright (C) 2022, Advanced Micro Devices, Inc.
'''

import sys, time, os, re, copy

top = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
if os.path.exists(os.path.join(top, 'src', 'python', 'solar_capture')):
    sys.path.insert(0, os.path.join(top, 'src', 'python'))

import solar_capture.cli as sc_cli
import solar_capture as sc


usage_text = '''
usage:
  solar_balancer [global-opts] interface=ethX [stream-opts] ...

options:
  output_shm          Deliver captured packets to shared memory channels
  channels            Specify the number of channels to spread load over
  fanout              Specify the max number of consumers per channel
  balance_mode        Control how new flows are assigned to channels
  copy_mode           Controls how packets are moved from input to output
  streams             ';' separated list of streams to capture
  capture_mode        Whether to steal (default) or sniff captured packets

examples:
  # Capture from eth2 and balance flows over 4 shared-memory channels.
  solar_balancer interface=eth2 output_shm=/dev/hugepages/eth2 channels=2

  # Start consumer processes using libpcap.
  solar_libpcap tcpdump -i scshm:/dev/hugepages/eth2-0
  solar_libpcap tcpdump -i scshm:/dev/hugepages/eth2-1
'''


HELP_INTERFACE = """\
  Specify a network interface or cluster to capture packets from.
"""


HELP_OUTPUT_SHM = '''\
  Specify the path for SolarCapture shared memory channels that captured
  packets are to be delivered into.  If the path contains the string $c
  then it is replaced with the channel number.  Otherwise a hyphen and the
  channel number is appended to the path given.

  If using packed-stream mode and copy_mode=zc then the path given must be
  on a hugetblfs filesystem.  (This will usually improve performance even
  when not using packed-stream mode).
'''


HELP_CHANNELS = '''\
  Specify number of channels to spread captured packets over.
'''


HELP_FANOUT = '''\
  Specify the maximum number of consumers that can connect to each channel.
'''


HELP_BALANCE_MODE = '''\
  The 'balance_mode' controls how the flow balancer selects an output
  channel for new flows.  By default the flow balancer directs new flows to
  the channel that it estimates has the lowest level of load.

  Set balance_mode=round-robin to direct each new flow to the next channel
  in round-robin order.
'''


HELP_COPY_MODE = '''\
  The 'copy_mode' controls whether the flow balancer performs a memory to
  memory copy when passing packets from input to outputs.

  The default copy_mode is 'copy'.  This has a number of advantages: A slow
  consumer cannot hold on to capture buffers, ensuring there is no
  head-of-line blocking.  It ensures that the capture buffers are recycled
  quickly, so that they are likely to remain in cache, which improves
  capture performance.  This mode can use the 'packed stream' encapsulation
  on output, which improves efficiency of the shared memory channel and
  downstream consumers.

  The alternative copy_mode is 'zc' which passes packets from input to
  outputs without copying.  Zero-copy sometimes gives better performance,
  particularly when the average packet size is large.
'''


HELP_STREAMS = '''\
  Specify streams of packets to be captured.  This option is set to a
  list of streams separated by ';'.  Streams may be specified using two
  formats, abbreviated or full.

  Abbreviated syntax is:
    {udp,tcp}:[vid=<vlan>,]<local-host>:<local-port>
    {udp,tcp}:[vid=<vlan>,]<local-host>:<local-port>,<remote-host>:<remote-port>
    eth:[vid=<vlan>,]<local-mac>

  Hosts may be specified as host names or IPv4 addresses.

  Full syntax is a series of comma-separated key=value pairs, plus a few
  special values:
    all   (capture all traffic)
    mismatch (capture all mismatch traffic)
    ip    (shortcut for eth_type=ip)
    tcp   (shortcut for ip_protocol=tcp)
    udp   (shortcut for ip_protocol=udp)
    vid=INT
    eth_type=ip|INT
    dmac=MAC
    smac=MAC
    dhost=IP4_ADDR|HOSTNAME
    shost=IP4_ADDR|HOSTNAME
    ip_protocol=tcp|udp|INT
    sport=INT
    dport=INT

  The IP-specific options all implicitly set eth_type=ip.  Integers must be
  given in decimal.

  For example, if we're capturing RX traffic these are equivalent:

    streams="udp:192.168.1.1:20019;eth:00:0F:53:0C:03:89"
    streams="udp,dhost=192.168.1.1,dport=20019;dmac=00:0F:53:0C:03:89"

  If neither the 'streams' option nor 'join_streams' option are
  specified, then all packets arriving at an interface are captured.

  The combinations of header fields that can be used to specify a stream
  depend on the type of adapter, the firmware version and the firmware
  variant.  See the SolarCapture User Guide for more detail.

  Some adapters are not able to filter TCP and UDP streams by VLAN-ID.  On
  such adapters the VLAN specification is ignored for capture, but is used
  for the purposes of joining multicast groups (join_streams).

  Note the quoting needed to prevent the shell from interpreting the ';'
'''


HELP_CAPTURE_MODE = '''\
  This option controls whether packets captured by solar_balancer are also
  received by the host network stack or another capture process.  The
  options are:

    steal     - captured packets are not received by the host (default)
    sniff     - captured packets are also received by the host
'''


def handle_interface_arg(config, k, v):
    config.new_instance(interface=v)


def split_sc(config, k, v):
    config.set_key(k, [word for word in v.split(';') if word])


def handle_other_arg(config, k, v):
    if v is None: # unknown arg without "=foo" suffix
        sc_cli.err("Unparsable argument %r" % k)
    else:
        sc_cli.err("Unparsable argument %s=%s" % (k, v))


arg_list = [
    sc_cli.Arg("interface", handler=handle_interface_arg),
    sc.cli.Str("output_shm"),
    sc.cli.Int("channels"),
    sc.cli.Int("fanout", default=1),
    sc.cli.Str("balance_mode", default='estimate'),
    sc.cli.Str("copy_mode", default='copy'),
    sc.cli.Str("capture_mode", default="steal"),
    sc.cli.Arg("streams", split_sc, repeatable=1, default=[]),
    ]
for arg in arg_list:
    arg.usage = globals()['HELP_' + arg.name.upper()]
known_args = dict((a.name, a) for a in arg_list)


def setup_stream(scs, stream):
    cap_thrd = scs.new_thread()
    bal_thrd = cap_thrd
    exp_thrd = cap_thrd

    vi_attr = dict()
    vi_attr['unpack_packed_stream'] = (stream['copy_mode'] == 'zc')
    vi_attr['capture_mode'] = stream['capture_mode']
    vi = cap_thrd.new_vi(stream['interface'], attr=vi_attr)
    filter_streams = stream['streams']
    if len(filter_streams) == 0:
        filter_streams = ['all']
    for s in filter_streams:
        vi.add_stream(scs.new_stream(s, attr=dict(vid_optional=1)))
    fb_args = dict(mode=stream['balance_mode'], copy_mode=stream['copy_mode'])
    flow_bal = bal_thrd.new_node('sc_flow_balancer', args=fb_args)
    sc.connect(vi, flow_bal)

    shm_pattern = stream['output_shm']
    if '$c' not in shm_pattern:
        shm_pattern += '-$c'
    for i in range(stream['channels']):
        # We use sc_shm_broadcast at the moment because it gives us more
        # options than sc_shm_export.
        path = shm_pattern.replace('$c', str(i))
        shm_args = dict(path=path,
                        min_connected_reliable_channels=0,
                        reliable_mode=1,
                        max_channels=stream['fanout'])
        shm = exp_thrd.new_node('sc_shm_broadcast', args=shm_args)
        sc.connect(flow_bal, shm)


def main(args):
    streams = sc_cli.parse_args(args, known_args, usage_text,
                                handle_unknown_arg=handle_other_arg)
    for stream in streams:
        if not stream['channels']:
            sc.cli.err("Missing channels= for interface=%s" % \
                           stream['interface'])
        if not stream['output_shm']:
            sc_cli.err("Missing output_shm= for interface=%s" % \
                       stream['interface'])
        
    scs = sc.new_session()
    for stream in streams:
        setup_stream(scs, stream)
    scs.go()
    while True:
        time.sleep(10000)


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except (sc.SCError, ValueError) as e:
        s = str(e)
        if 'ERROR:' not in s:
            s = 'ERROR: ' + s
        if not s.endswith('\n'):
            s += '\n'
        sys.stderr.write(s)
        sys.exit(1)
