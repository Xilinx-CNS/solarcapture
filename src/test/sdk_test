#!/usr/bin/python2

# SPDX-License-Identifier: MIT
# X-SPDX-Copyright-Text: Copyright (C) 2022, Advanced Micro Devices, Inc.

"""Simple app to construct basic capture or replay pipelines."""
import os, sys, time
top = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..', '..'))
if os.path.exists(os.path.join(top, 'src', 'python', 'solar_capture')):
    sys.path.append(os.path.join(top, 'src', 'python'))
import solar_capture

def parse_extension(extension):
    node, args = extension, {}
    if ':' in node:
        node, _args = node.split(':', 1)
        for arg in _args.split(','):
            if '=' in arg:
                k, v = arg.split('=', 1)
                args[k] = v
            else:
                args[k] = 1
    return node, args

def main(interface, pcap_file, mode, *extensions):
    session = solar_capture.new_session()
    thread = session.new_thread()
    if mode == 'replay':
        pipeline = thread.new_node('sc_reader', args={'filename': pcap_file})
        for node, args in map(parse_extension, extensions):
            pipeline = pipeline.connect(thread.new_node(node, args=args))
        injector = thread.new_node('sc_injector', args={'interface': interface})
        pipeline.connect(injector).connect(thread.new_node('sc_exit'))
    elif mode == 'capture':
        vi = pipeline = thread.new_vi(interface)
        for node, args in map(parse_extension, extensions):
            pipeline = pipeline.connect(thread.new_node(node, args=args))
        solar_capture.connect(pipeline, thread.new_node('sc_exit'))
        vi.add_stream(solar_capture.Stream("all"))
    else:
        assert 0, `mode`
    session.go()
    while True:
        time.sleep(10000)

if __name__ == '__main__':
    main(*sys.argv[1:])
