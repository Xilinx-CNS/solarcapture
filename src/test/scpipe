#!/usr/bin/python2

# SPDX-License-Identifier: MIT
# X-SPDX-Copyright-Text: Copyright (C) 2022, Advanced Micro Devices, Inc.

######################################################################

import sys, time, os, re

top = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..', '..'))
sys.path.append(os.path.join(top, 'src', 'python'))
import solar_capture as sc


usage_text = """\
usage:
  %prog <NODE | ATTR | RESET_ATTR | THREAD>...

  NODE       := NODE_TYPE:[ARG1=VAL1[;ARG2=VAL2]...]

  ATTR       := attr=NAME=VAL
  RESET_ATTR := attr=

  THREAD     := thread=[NAME]
"""


def usage_msg(f):
    me = os.path.basename(sys.argv[0])
    f.write(usage_text.replace("%prog", me))


def usage_err():
    usage_msg(sys.stderr)
    sys.exit(1)


######################################################################
# main()


args = sys.argv[1:]
if not args:
    usage_err()

scs = sc.new_session()
attr = dict()
pipeline = None
thread = None
threads = dict()

for arg in args:
    if arg.startswith('attr='):
        n_v = arg[len('attr='):]
        if n_v:
            n, v = n_v.split('=', 1)
            attr[n] = v
        else:
            attr = dict()
    elif arg.startswith('thread='):
        thread_name = arg[len('thread='):]
        if thread_name:
            if thread_name not in threads:
                threads[thread_name] = scs.new_thread(attr=attr)
            thread = threads[thread_name]
        else:
            thread = scs.new_thread(attr=attr)
    elif re.match(r'[a-zA-Z_0-9]+:.*', arg):
        if not thread:
            thread = scs.new_thread(attr=attr)
        node = thread.new_node_from_str(arg, attr=attr)
        if pipeline:
            pipeline = pipeline.connect(node)
        else:
            pipeline = node
    else:
        sys.stderr.write("ERROR: bad arg '%s'\n" % arg)
        sys.exit(2)

scs.go()
while True:
    time.sleep(10000)
